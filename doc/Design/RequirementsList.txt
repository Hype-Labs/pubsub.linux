Publish-Subscribe Requirements List

.	Each client and service have a 160 bit key generated by through the SHA-1 hash function. The client key is the hash of the client Hype ID. The service key is the hash of the service name.

. The manager of a service is the client that manages the subscriptions and that propagates the information to the subscribers.

. Every client is enabled to be the manager of a service.

.	Any client can create/subscribe a service.

. Each client has a list of the subscribed services. Each entry on that list correspond to a service and it contains the service key, the service name and the Hype ID of the service manager.

. Every client has a list of the managed services. Each entry on that list corresponds to a service and it contains the service key and the list of subscribers.

. The manager of a certain service is the client with the closest key to the service key.

. The distance between keys is evaluated using a XOR metric. To calculate it the keys should be XORed and the result must be interpreted as an integer value which is the distance value.

. Any client can publish a message in a given service. Even if it has no subscription.

. When a client wants to publish a message in a given service it sends it to the manager of that service.

. A client identifies the manager of a given service by analysing, from the clients he knows, which is the one with a key closer to the service key.

. There are 5 types of messages at the application level: SUBSCRIBE_SERVICE, UNSUBSCRIBE_SERVICE, PUBLISH, INFO, CHANGE_SERVICE_MANAGER

. The SUBSCRIBE_SERVICE message is sent to the service manager and enables any client to subscribe a service. When the service manager receives a SUBSCRIBE_SERVICE message it adds the originator of the message to the set of subscribers. If the service does not exist, the service manager creates it.

. The UNSUBSCRIBE_SERVICE message is sent to the service manager and enables a client to unsubscribe a service. When the service manager receives an UNSUBSCRIBE_SERVICE message it removes the originator of the message from the set of subscribers. If the number of subscribers of a service gets to 0 the service is removed.

. The PUBLISH message is sent to a service manager to publish a message in that service. When a service manager receives a PUBLISH message it forwards the message to all the subscribers.

. The CHANGE_SERVICE_MANAGER message is used in 2 situations:
      • When a client, which is manager of a service, voluntarily leaves the network. The client that leaves the network is responsible for sending the CHANGE_SERVICE_MANAGER message to the new manager and to all the subscribers.
      • When a new client enters the network and its client ID is the closest to an already existent service. The client that was previously manager of that service is responsible for sending the CHANGE_SERVICE_MANAGER message.

. The CHANGE_SERVICE_MANAGER message is sent to the client that will be responsible for the service ID and to all the clients that have subscribed that service.

. If a client receives a CHANGE_SERVICE_MANAGER message, and it is the new service manager, it updates the list of managed services.

. If a client receives a CHANGE_SERVICE_MANAGER message, and it is a subscriber it updates the ID of that service manager in its services list according to the content of the message.

. If a client detects that a service manager of a service he subscribed has leaved the network without receiving a CHANGE_SERVICE_MANAGER message it issues a CREATE_SERVICE message.

. Each client uses the Hype SDK to know which other clients are available in the network.

. Each client has a list of clients that are available on the network. Each entry on that list correspond to a client and it contains its Hype ID.

. The list of network clients in each client must be updated regularly (ex: from 10 in 10 seconds).

. Each client has to regularly check if the managers of the services he subscribed are still available on the network. If not a SUBSCRIBE_SERVICE message must be re-sent to the new service manager. There is a timeout period (1min?) that must be elapsed to consider that a node is no longer on the network -> instanceLost already considers this?.

TODO: Check SCRIBE protocol for missing requirements.

DOUBTS:
• Should we create multicast at the application level given that the HypeSDK will support it in the future? There is no advantage in having the multicast at the application level when we can have it at the network level. For now we can use unicast to send the messages from the root to the subscribers. This is a waste of bandwidth but it may be a better approach than implementing multicast at the application level.
